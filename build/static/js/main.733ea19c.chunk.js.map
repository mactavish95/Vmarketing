{"version":3,"sources":["screens/HomeScreen.js","components/VoiceRecognition.js","components/VoiceAnalysis.js","services/llmService.js","screens/ReviewGenerator.js","screens/VoiceReview.js","screens/VoiceTest.js","screens/ReviewHistory.js","components/Header.js","App.js","index.js"],"names":["HomeScreen","_jsxs","className","children","_jsx","Link","to","VoiceRecognition","_ref","onTranscript","placeholder","disabled","isListening","setIsListening","useState","transcript","setTranscript","interimTranscript","setInterimTranscript","error","setError","isSupported","setIsSupported","isInitialized","setIsInitialized","recognitionRef","useRef","useEffect","initializeSpeechRecognition","current","abort","e","console","log","SpeechRecognition","window","webkitSpeechRecognition","setupRecognition","recognition","continuous","interimResults","lang","maxAlternatives","onstart","onresult","event","finalTranscript","i","resultIndex","results","length","isFinal","newTranscript","onerror","errorMessage","concat","onend","onaudiostart","onaudioend","onsoundstart","onsoundend","onspeechstart","onspeechend","retryInitialization","setTimeout","onClick","stopListening","stop","startListening","start","title","clearTranscript","copyToClipboard","textToCopy","navigator","clipboard","writeText","originalError","split","includes","VoiceAnalysis","analysis","onGenerateReview","onSaveAnalysis","isExpanded","setIsExpanded","isGeneratingReview","setIsGeneratingReview","success","data","provider","sentiment","confidence","keyPoints","topics","suggestions","tone","actionItems","summary","wordCount","speakingPace","handleSaveAnalysis","style","backgroundColor","getSentimentColor","toUpperCase","width","getConfidenceColor","Math","round","map","point","index","topic","_Fragment","suggestion","item","async","constructor","this","apiKey","process","REACT_APP_OPENAI_API_KEY","anthropicKey","REACT_APP_ANTHROPIC_API_KEY","useLocalFallback","analyzeVoiceInput","context","arguments","undefined","trim","result","analyzeWithOpenAI","analyzeWithAnthropic","analyzeLocally","message","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","ok","Error","status","json","parse","choices","_objectSpread","timestamp","Date","toISOString","text","words","toLowerCase","positiveWords","negativeWords","positiveCount","negativeCount","forEach","word","min","sentences","filter","s","slice","detectTone","extractTopics","generateSuggestions","generateActionItems","push","actions","generateReviewFromVoice","reviewType","rating","reviewText","formatReviewText","stars","repeat","join","ReviewGenerator","reviewData","setReviewData","pros","cons","experience","generatedReview","setGeneratedReview","isGenerating","setIsGenerating","setAnalysis","isAnalyzing","setIsAnalyzing","showAnalysis","setShowAnalysis","handleInputChange","useHistory","field","value","prev","handleVoiceTranscript","analyzeReview","llmService","isGeneratedReview","createReview","review","professional","positive","negative","neutral","casual","enthusiastic","critical","balanced","charAt","resetReview","alert","analysisData","analysisRecord","id","now","existingAnalyses","localStorage","getItem","setItem","label","icon","type","star","onChange","target","rows","generateReview","reviewHistory","newReview","itemName","category","unshift","VoiceReview","setReviewType","setRating","savedReviews","setSavedReviews","inputTranscript","htmlFor","clearAll","existingReviews","toLocaleDateString","VoiceTest","testResults","setTestResults","browserInfo","setBrowserInfo","React","_navigator$mediaDevic","info","userAgent","platform","language","cookieEnabled","onLine","speechRecognition","mediaDevices","getUserMedia","addTestResult","toLocaleTimeString","Object","entries","key","stream","audio","getTracks","track","clearResults","ReviewHistory","reviews","setReviews","filteredReviews","setFilteredReviews","searchTerm","setSearchTerm","filterType","setFilterType","loadReviews","filterReviews","allReviews","voiceReview","isVoiceReview","sort","a","b","filtered","product","restaurant","hotel","movie","book","service","app","place","general","copyReview","confirm","updatedReviews","regularReviews","voiceReviews","originalVoiceReviews","deleteReview","substring","year","month","day","hour","minute","Header","location","useLocation","pathname","App","Router","Switch","Route","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.733ea19c.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './HomeScreen.css';\n\nconst HomeScreen = () => {\n    return (\n        <div className=\"home-screen\">\n            <div className=\"hero-section\">\n                <h1>Review Generator</h1>\n                <p>Create professional reviews for products, services, and experiences in seconds</p>\n            </div>\n            \n            <div className=\"features-grid\">\n                <div className=\"feature-card\">\n                    <div className=\"feature-icon\">🎤</div>\n                    <h3>Voice Reviews</h3>\n                    <p>Create reviews entirely through voice input - just speak your thoughts!</p>\n                    <Link to=\"/voice\" className=\"feature-link\">\n                        Try Voice Review →\n                    </Link>\n                </div>\n                \n                <div className=\"feature-card\">\n                    <div className=\"feature-icon\">📝</div>\n                    <h3>Product Reviews</h3>\n                    <p>Generate detailed product reviews with pros, cons, and recommendations</p>\n                </div>\n                \n                <div className=\"feature-card\">\n                    <div className=\"feature-icon\">🍽️</div>\n                    <h3>Restaurant Reviews</h3>\n                    <p>Create compelling restaurant reviews covering food, service, and ambiance</p>\n                </div>\n                \n                <div className=\"feature-card\">\n                    <div className=\"feature-icon\">🏨</div>\n                    <h3>Hotel Reviews</h3>\n                    <p>Write comprehensive hotel reviews including amenities and location</p>\n                </div>\n                \n                <div className=\"feature-card\">\n                    <div className=\"feature-icon\">🎬</div>\n                    <h3>Entertainment Reviews</h3>\n                    <p>Generate reviews for movies, books, games, and other entertainment</p>\n                </div>\n                \n                <div className=\"feature-card\">\n                    <div className=\"feature-icon\">🔧</div>\n                    <h3>Service Reviews</h3>\n                    <p>Create professional service reviews for any business or service</p>\n                </div>\n            </div>\n            \n            <div className=\"cta-section\">\n                <Link to=\"/generate\" className=\"cta-button\">\n                    Start Generating Reviews\n                </Link>\n                <Link to=\"/voice\" className=\"cta-button voice-cta\">\n                    🎤 Try Voice Review\n                </Link>\n                <Link to=\"/history\" className=\"secondary-button\">\n                    View History\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default HomeScreen;","import React, { useState, useEffect, useRef } from 'react';\nimport './VoiceRecognition.css';\n\nconst VoiceRecognition = ({ onTranscript, placeholder = \"Click to start speaking...\", disabled = false }) => {\n    const [isListening, setIsListening] = useState(false);\n    const [transcript, setTranscript] = useState('');\n    const [interimTranscript, setInterimTranscript] = useState('');\n    const [error, setError] = useState('');\n    const [isSupported, setIsSupported] = useState(false);\n    const [isInitialized, setIsInitialized] = useState(false);\n    const recognitionRef = useRef(null);\n\n    useEffect(() => {\n        initializeSpeechRecognition();\n        \n        return () => {\n            if (recognitionRef.current) {\n                try {\n                    recognitionRef.current.abort();\n                } catch (e) {\n                    console.log('Cleanup error:', e);\n                }\n            }\n        };\n    }, []);\n\n    const initializeSpeechRecognition = () => {\n        try {\n            // Check for speech recognition support\n            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n            \n            if (!SpeechRecognition) {\n                setError('Speech recognition is not supported in this browser. Please use Chrome, Edge, or Safari.');\n                setIsSupported(false);\n                return;\n            }\n\n            // Create recognition instance\n            recognitionRef.current = new SpeechRecognition();\n            setupRecognition();\n            setIsSupported(true);\n            setIsInitialized(true);\n            \n        } catch (error) {\n            console.error('Failed to initialize speech recognition:', error);\n            setError('Failed to initialize speech recognition. Please refresh the page and try again.');\n            setIsSupported(false);\n        }\n    };\n\n    const setupRecognition = () => {\n        const recognition = recognitionRef.current;\n        \n        if (!recognition) return;\n\n        // Configure recognition settings\n        recognition.continuous = true;\n        recognition.interimResults = true;\n        recognition.lang = 'en-US';\n        recognition.maxAlternatives = 1;\n\n        // Event handlers\n        recognition.onstart = () => {\n            console.log('Speech recognition started');\n            setIsListening(true);\n            setError('');\n        };\n\n        recognition.onresult = (event) => {\n            let finalTranscript = '';\n            let interimTranscript = '';\n\n            try {\n                for (let i = event.resultIndex; i < event.results.length; i++) {\n                    const transcript = event.results[i][0].transcript;\n                    if (event.results[i].isFinal) {\n                        finalTranscript += transcript;\n                    } else {\n                        interimTranscript += transcript;\n                    }\n                }\n\n                console.log('Voice recognition result:', { finalTranscript, interimTranscript });\n\n                if (finalTranscript) {\n                    const newTranscript = transcript + finalTranscript;\n                    setTranscript(newTranscript);\n                    setInterimTranscript('');\n                    \n                    if (onTranscript) {\n                        console.log('Calling onTranscript with:', newTranscript);\n                        onTranscript(newTranscript);\n                    }\n                } else {\n                    setInterimTranscript(interimTranscript);\n                }\n            } catch (error) {\n                console.error('Error processing speech recognition result:', error);\n                setError('Error processing speech. Please try again.');\n            }\n        };\n\n        recognition.onerror = (event) => {\n            console.error('Speech recognition error:', event.error);\n            setIsListening(false);\n            \n            let errorMessage = '';\n            switch (event.error) {\n                case 'no-speech':\n                    errorMessage = 'No speech detected. Please try speaking again.';\n                    break;\n                case 'audio-capture':\n                    errorMessage = 'Audio capture failed. Please check your microphone permissions and try again.';\n                    break;\n                case 'not-allowed':\n                    errorMessage = 'Microphone access denied. Please allow microphone access in your browser settings and refresh the page.';\n                    break;\n                case 'network':\n                    errorMessage = 'Network error. Please check your internet connection and try again.';\n                    break;\n                case 'service-not-allowed':\n                    errorMessage = 'Speech recognition service not allowed. Please try a different browser.';\n                    break;\n                case 'bad-grammar':\n                    errorMessage = 'Speech recognition grammar error. Please try speaking more clearly.';\n                    break;\n                case 'language-not-supported':\n                    errorMessage = 'Language not supported. Please try speaking in English.';\n                    break;\n                default:\n                    errorMessage = `Speech recognition error: ${event.error}. Please try again.`;\n            }\n            \n            setError(errorMessage);\n        };\n\n        recognition.onend = () => {\n            console.log('Speech recognition ended');\n            setIsListening(false);\n        };\n\n        recognition.onaudiostart = () => {\n            console.log('Audio capturing started');\n        };\n\n        recognition.onaudioend = () => {\n            console.log('Audio capturing ended');\n        };\n\n        recognition.onsoundstart = () => {\n            console.log('Sound detected');\n        };\n\n        recognition.onsoundend = () => {\n            console.log('Sound ended');\n        };\n\n        recognition.onspeechstart = () => {\n            console.log('Speech started');\n        };\n\n        recognition.onspeechend = () => {\n            console.log('Speech ended');\n        };\n    };\n\n    const startListening = () => {\n        if (!isSupported || disabled || !isInitialized) {\n            console.log('Cannot start listening:', { isSupported, disabled, isInitialized });\n            return;\n        }\n        \n        try {\n            setError('');\n            console.log('Starting speech recognition...');\n            recognitionRef.current.start();\n        } catch (error) {\n            console.error('Error starting speech recognition:', error);\n            setError('Failed to start speech recognition. Please try again.');\n            \n            // Try to reinitialize if there's an error\n            setTimeout(() => {\n                console.log('Attempting to reinitialize speech recognition...');\n                initializeSpeechRecognition();\n            }, 1000);\n        }\n    };\n\n    const stopListening = () => {\n        if (recognitionRef.current && isListening) {\n            try {\n                console.log('Stopping speech recognition...');\n                recognitionRef.current.stop();\n            } catch (error) {\n                console.error('Error stopping speech recognition:', error);\n            }\n        }\n    };\n\n    const clearTranscript = () => {\n        setTranscript('');\n        setInterimTranscript('');\n        if (onTranscript) {\n            onTranscript('');\n        }\n    };\n\n    const copyToClipboard = () => {\n        const textToCopy = transcript + interimTranscript;\n        if (textToCopy) {\n            try {\n                navigator.clipboard.writeText(textToCopy);\n                const originalError = error;\n                setError('Copied to clipboard!');\n                setTimeout(() => setError(originalError), 2000);\n            } catch (error) {\n                console.error('Failed to copy to clipboard:', error);\n                setError('Failed to copy to clipboard. Please select and copy manually.');\n            }\n        }\n    };\n\n    const retryInitialization = () => {\n        setError('');\n        setIsInitialized(false);\n        setTimeout(() => {\n            initializeSpeechRecognition();\n        }, 500);\n    };\n\n    if (!isSupported) {\n        return (\n            <div className=\"voice-recognition-container\">\n                <div className=\"voice-error\">\n                    <div className=\"error-icon\">🎤</div>\n                    <p>{error}</p>\n                    <p className=\"error-suggestion\">\n                        Try using Chrome, Edge, or Safari for voice recognition support.\n                    </p>\n                    <button onClick={retryInitialization} className=\"retry-btn\">\n                        🔄 Retry\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"voice-recognition-container\">\n            <div className=\"voice-controls\">\n                <button\n                    className={`voice-button ${isListening ? 'listening' : ''} ${disabled ? 'disabled' : ''}`}\n                    onClick={isListening ? stopListening : startListening}\n                    disabled={disabled || !isInitialized}\n                    title={isListening ? 'Stop recording' : 'Start recording'}\n                >\n                    <div className=\"voice-icon\">\n                        {isListening ? '⏹️' : '🎤'}\n                    </div>\n                    <div className=\"voice-status\">\n                        {isListening ? 'Listening...' : 'Start Voice Input'}\n                    </div>\n                    {isListening && (\n                        <div className=\"pulse-animation\"></div>\n                    )}\n                </button>\n\n                {(transcript || interimTranscript) && (\n                    <div className=\"voice-actions\">\n                        <button\n                            className=\"action-btn clear-btn\"\n                            onClick={clearTranscript}\n                            title=\"Clear transcript\"\n                        >\n                            🗑️ Clear\n                        </button>\n                        <button\n                            className=\"action-btn copy-btn\"\n                            onClick={copyToClipboard}\n                            title=\"Copy to clipboard\"\n                        >\n                            📋 Copy\n                        </button>\n                    </div>\n                )}\n            </div>\n\n            <div className=\"transcript-container\">\n                {transcript || interimTranscript ? (\n                    <div className=\"transcript-content\">\n                        <div className=\"transcript-text\">\n                            {transcript}\n                            {interimTranscript && (\n                                <span className=\"interim-text\">{interimTranscript}</span>\n                            )}\n                        </div>\n                        <div className=\"transcript-stats\">\n                            <span className=\"word-count\">\n                                {(transcript + interimTranscript).split(' ').length} words\n                            </span>\n                            <span className=\"char-count\">\n                                {(transcript + interimTranscript).length} characters\n                            </span>\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"transcript-placeholder\">\n                        <div className=\"placeholder-icon\">💬</div>\n                        <p>{placeholder}</p>\n                        <p className=\"placeholder-hint\">\n                            Click the microphone button above to start speaking\n                        </p>\n                    </div>\n                )}\n            </div>\n\n            {error && (\n                <div className=\"voice-error\">\n                    <div className=\"error-icon\">⚠️</div>\n                    <p>{error}</p>\n                    {error.includes('microphone') && (\n                        <button onClick={retryInitialization} className=\"retry-btn\">\n                            🔄 Retry\n                        </button>\n                    )}\n                </div>\n            )}\n\n            {isListening && (\n                <div className=\"listening-indicator\">\n                    <div className=\"listening-dots\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                    <p>Listening... Speak now</p>\n                </div>\n            )}\n\n            {!isInitialized && isSupported && (\n                <div className=\"initializing-indicator\">\n                    <div className=\"loading-spinner\"></div>\n                    <p>Initializing voice recognition...</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default VoiceRecognition; ","import React, { useState } from 'react';\nimport './VoiceAnalysis.css';\n\nconst VoiceAnalysis = ({ analysis, onGenerateReview, onSaveAnalysis }) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n    const [isGeneratingReview, setIsGeneratingReview] = useState(false);\n\n    if (!analysis || !analysis.success) {\n        return (\n            <div className=\"voice-analysis-container\">\n                <div className=\"analysis-error\">\n                    <div className=\"error-icon\">⚠️</div>\n                    <h3>Analysis Failed</h3>\n                    <p>{analysis?.error || 'Unable to analyze voice input'}</p>\n                </div>\n            </div>\n        );\n    }\n\n    const { analysis: data, provider } = analysis;\n    const {\n        sentiment,\n        confidence,\n        keyPoints,\n        topics,\n        suggestions,\n        tone,\n        actionItems,\n        summary,\n        wordCount,\n        speakingPace,\n        transcript\n    } = data;\n\n    const getSentimentColor = (sentiment) => {\n        switch (sentiment) {\n            case 'positive': return '#28a745';\n            case 'negative': return '#dc3545';\n            default: return '#6c757d';\n        }\n    };\n\n    const getConfidenceColor = (confidence) => {\n        if (confidence >= 0.8) return '#28a745';\n        if (confidence >= 0.6) return '#ffc107';\n        return '#dc3545';\n    };\n\n    const handleGenerateReview = async () => {\n        if (onGenerateReview) {\n            setIsGeneratingReview(true);\n            try {\n                await onGenerateReview(transcript, data);\n            } finally {\n                setIsGeneratingReview(false);\n            }\n        }\n    };\n\n    const handleSaveAnalysis = () => {\n        if (onSaveAnalysis) {\n            onSaveAnalysis(analysis);\n        }\n    };\n\n    return (\n        <div className=\"voice-analysis-container\">\n            <div className=\"analysis-header\">\n                <div className=\"provider-badge\">\n                    <span className=\"provider-icon\">🤖</span>\n                    {provider}\n                </div>\n                <div className=\"analysis-actions\">\n                    <button \n                        className=\"action-btn expand-btn\"\n                        onClick={() => setIsExpanded(!isExpanded)}\n                        title={isExpanded ? 'Collapse' : 'Expand'}\n                    >\n                        {isExpanded ? '📁' : '📂'}\n                    </button>\n                    <button \n                        className=\"action-btn save-btn\"\n                        onClick={handleSaveAnalysis}\n                        title=\"Save Analysis\"\n                    >\n                        💾\n                    </button>\n                </div>\n            </div>\n\n            <div className=\"analysis-summary\">\n                <div className=\"sentiment-section\">\n                    <div className=\"sentiment-indicator\" style={{ backgroundColor: getSentimentColor(sentiment) }}>\n                        <span className=\"sentiment-emoji\">\n                            {sentiment === 'positive' ? '😊' : sentiment === 'negative' ? '😞' : '😐'}\n                        </span>\n                        <span className=\"sentiment-text\">{sentiment.toUpperCase()}</span>\n                    </div>\n                    <div className=\"confidence-meter\">\n                        <div className=\"confidence-label\">Confidence</div>\n                        <div className=\"confidence-bar\">\n                            <div \n                                className=\"confidence-fill\" \n                                style={{ \n                                    width: `${confidence * 100}%`,\n                                    backgroundColor: getConfidenceColor(confidence)\n                                }}\n                            ></div>\n                        </div>\n                        <div className=\"confidence-value\">{Math.round(confidence * 100)}%</div>\n                    </div>\n                </div>\n\n                <div className=\"stats-grid\">\n                    <div className=\"stat-item\">\n                        <div className=\"stat-label\">Words</div>\n                        <div className=\"stat-value\">{wordCount}</div>\n                    </div>\n                    <div className=\"stat-item\">\n                        <div className=\"stat-label\">Pace</div>\n                        <div className=\"stat-value\">{speakingPace}</div>\n                    </div>\n                    <div className=\"stat-item\">\n                        <div className=\"stat-label\">Tone</div>\n                        <div className=\"stat-value\">{tone}</div>\n                    </div>\n                    <div className=\"stat-item\">\n                        <div className=\"stat-label\">Topics</div>\n                        <div className=\"stat-value\">{topics?.length || 0}</div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"analysis-content\">\n                <div className=\"content-section\">\n                    <h3>📝 Summary</h3>\n                    <p className=\"summary-text\">{summary}</p>\n                </div>\n\n                {keyPoints && keyPoints.length > 0 && (\n                    <div className=\"content-section\">\n                        <h3>🎯 Key Points</h3>\n                        <ul className=\"key-points-list\">\n                            {keyPoints.map((point, index) => (\n                                <li key={index} className=\"key-point-item\">\n                                    <span className=\"point-bullet\">•</span>\n                                    {point}\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n\n                {topics && topics.length > 0 && (\n                    <div className=\"content-section\">\n                        <h3>🏷️ Topics</h3>\n                        <div className=\"topics-tags\">\n                            {topics.map((topic, index) => (\n                                <span key={index} className=\"topic-tag\">\n                                    {topic}\n                                </span>\n                            ))}\n                        </div>\n                    </div>\n                )}\n\n                {isExpanded && (\n                    <>\n                        {suggestions && suggestions.length > 0 && (\n                            <div className=\"content-section\">\n                                <h3>💡 Suggestions</h3>\n                                <ul className=\"suggestions-list\">\n                                    {suggestions.map((suggestion, index) => (\n                                        <li key={index} className=\"suggestion-item\">\n                                            <span className=\"suggestion-icon\">💡</span>\n                                            {suggestion}\n                                        </li>\n                                    ))}\n                                </ul>\n                            </div>\n                        )}\n\n                        {actionItems && actionItems.length > 0 && (\n                            <div className=\"content-section\">\n                                <h3>✅ Action Items</h3>\n                                <ul className=\"action-items-list\">\n                                    {actionItems.map((item, index) => (\n                                        <li key={index} className=\"action-item\">\n                                            <span className=\"action-icon\">✅</span>\n                                            {item}\n                                        </li>\n                                    ))}\n                                </ul>\n                            </div>\n                        )}\n\n                        <div className=\"content-section\">\n                            <h3>🎤 Original Transcript</h3>\n                            <div className=\"transcript-display\">\n                                <p>{transcript}</p>\n                            </div>\n                        </div>\n                    </>\n                )}\n            </div>\n\n            <div className=\"analysis-actions-footer\">\n                <button \n                    className=\"generate-review-btn\"\n                    onClick={handleGenerateReview}\n                    disabled={isGeneratingReview}\n                >\n                    {isGeneratingReview ? (\n                        <>\n                            <span className=\"loading-spinner\"></span>\n                            Generating Review...\n                        </>\n                    ) : (\n                        <>\n                            ✨ Generate Review\n                        </>\n                    )}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default VoiceAnalysis; ","// LLM Service for analyzing voice input\n// Supports multiple AI providers: OpenAI, Anthropic, and local fallback\n\nclass LLMService {\n    constructor() {\n        this.apiKey = process.env.REACT_APP_OPENAI_API_KEY || '';\n        this.anthropicKey = process.env.REACT_APP_ANTHROPIC_API_KEY || '';\n        this.useLocalFallback = true;\n    }\n\n    // Analyze voice input with sentiment, key points, and suggestions\n    async analyzeVoiceInput(transcript, context = {}) {\n        if (!transcript || transcript.trim().length === 0) {\n            return {\n                success: false,\n                error: 'No transcript provided'\n            };\n        }\n\n        try {\n            // Try OpenAI first\n            if (this.apiKey) {\n                const result = await this.analyzeWithOpenAI(transcript, context);\n                if (result.success) return result;\n            }\n\n            // Try Anthropic if OpenAI fails\n            if (this.anthropicKey) {\n                const result = await this.analyzeWithAnthropic(transcript, context);\n                if (result.success) return result;\n            }\n\n            // Fallback to local analysis\n            if (this.useLocalFallback) {\n                return this.analyzeLocally(transcript, context);\n            }\n\n            return {\n                success: false,\n                error: 'No AI service available'\n            };\n\n        } catch (error) {\n            console.error('LLM analysis error:', error);\n            return {\n                success: false,\n                error: error.message || 'Analysis failed'\n            };\n        }\n    }\n\n    // OpenAI GPT-4 Analysis\n    async analyzeWithOpenAI(transcript, context) {\n        try {\n            const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.apiKey}`\n                },\n                body: JSON.stringify({\n                    model: 'gpt-4',\n                    messages: [\n                        {\n                            role: 'system',\n                            content: `You are an expert voice analysis assistant. Analyze the user's voice input and provide:\n1. Sentiment analysis (positive, negative, neutral)\n2. Key points and topics mentioned\n3. Suggestions for improvement\n4. Overall tone assessment\n5. Action items or next steps\n\nRespond in JSON format with these fields:\n{\n    \"sentiment\": \"positive/negative/neutral\",\n    \"confidence\": 0.0-1.0,\n    \"keyPoints\": [\"point1\", \"point2\"],\n    \"topics\": [\"topic1\", \"topic2\"],\n    \"suggestions\": [\"suggestion1\", \"suggestion2\"],\n    \"tone\": \"professional/casual/emotional/etc\",\n    \"actionItems\": [\"action1\", \"action2\"],\n    \"summary\": \"brief summary\",\n    \"wordCount\": number,\n    \"speakingPace\": \"fast/normal/slow\"\n}`\n                        },\n                        {\n                            role: 'user',\n                            content: `Analyze this voice input: \"${transcript}\"\n                            \nContext: ${JSON.stringify(context)}`\n                        }\n                    ],\n                    temperature: 0.3,\n                    max_tokens: 500\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`OpenAI API error: ${response.status}`);\n            }\n\n            const data = await response.json();\n            const analysis = JSON.parse(data.choices[0].message.content);\n\n            return {\n                success: true,\n                provider: 'OpenAI GPT-4',\n                analysis: {\n                    ...analysis,\n                    transcript: transcript,\n                    timestamp: new Date().toISOString()\n                }\n            };\n\n        } catch (error) {\n            console.error('OpenAI analysis failed:', error);\n            throw error;\n        }\n    }\n\n    // Anthropic Claude Analysis\n    async analyzeWithAnthropic(transcript, context) {\n        try {\n            const response = await fetch('https://api.anthropic.com/v1/messages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-api-key': this.anthropicKey,\n                    'anthropic-version': '2023-06-01'\n                },\n                body: JSON.stringify({\n                    model: 'claude-3-sonnet-20240229',\n                    max_tokens: 500,\n                    messages: [\n                        {\n                            role: 'user',\n                            content: `Analyze this voice input and provide a JSON response with:\n- sentiment (positive/negative/neutral)\n- confidence (0.0-1.0)\n- keyPoints (array of main points)\n- topics (array of topics discussed)\n- suggestions (array of improvement suggestions)\n- tone (professional/casual/emotional/etc)\n- actionItems (array of next steps)\n- summary (brief summary)\n- wordCount (number)\n- speakingPace (fast/normal/slow)\n\nVoice input: \"${transcript}\"\nContext: ${JSON.stringify(context)}`\n                        }\n                    ]\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Anthropic API error: ${response.status}`);\n            }\n\n            const data = await response.json();\n            const analysis = JSON.parse(data.content[0].text);\n\n            return {\n                success: true,\n                provider: 'Anthropic Claude',\n                analysis: {\n                    ...analysis,\n                    transcript: transcript,\n                    timestamp: new Date().toISOString()\n                }\n            };\n\n        } catch (error) {\n            console.error('Anthropic analysis failed:', error);\n            throw error;\n        }\n    }\n\n    // Local fallback analysis (basic sentiment and key points)\n    analyzeLocally(transcript, context) {\n        const words = transcript.toLowerCase().split(/\\s+/);\n        const wordCount = words.length;\n\n        // Basic sentiment analysis\n        const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'love', 'like', 'happy', 'satisfied', 'perfect'];\n        const negativeWords = ['bad', 'terrible', 'awful', 'hate', 'dislike', 'unhappy', 'disappointed', 'poor', 'worst', 'horrible'];\n        \n        let positiveCount = 0;\n        let negativeCount = 0;\n\n        words.forEach(word => {\n            if (positiveWords.includes(word)) positiveCount++;\n            if (negativeWords.includes(word)) negativeCount++;\n        });\n\n        let sentiment = 'neutral';\n        let confidence = 0.5;\n\n        if (positiveCount > negativeCount) {\n            sentiment = 'positive';\n            confidence = Math.min(0.9, 0.5 + (positiveCount - negativeCount) * 0.1);\n        } else if (negativeCount > positiveCount) {\n            sentiment = 'negative';\n            confidence = Math.min(0.9, 0.5 + (negativeCount - positiveCount) * 0.1);\n        }\n\n        // Extract key points (simple approach)\n        const sentences = transcript.split(/[.!?]+/).filter(s => s.trim().length > 0);\n        const keyPoints = sentences.slice(0, 3).map(s => s.trim());\n\n        // Determine speaking pace\n        const speakingPace = wordCount > 200 ? 'fast' : wordCount > 100 ? 'normal' : 'slow';\n\n        // Basic tone detection\n        const tone = this.detectTone(transcript);\n\n        return {\n            success: true,\n            provider: 'Local Analysis',\n            analysis: {\n                sentiment,\n                confidence,\n                keyPoints,\n                topics: this.extractTopics(transcript),\n                suggestions: this.generateSuggestions(sentiment, wordCount, tone),\n                tone,\n                actionItems: this.generateActionItems(transcript),\n                summary: sentences[0] || 'No clear summary available',\n                wordCount,\n                speakingPace,\n                transcript,\n                timestamp: new Date().toISOString()\n            }\n        };\n    }\n\n    // Helper methods for local analysis\n    detectTone(transcript) {\n        const text = transcript.toLowerCase();\n        \n        if (text.includes('!') || text.includes('amazing') || text.includes('wow')) {\n            return 'enthusiastic';\n        } else if (text.includes('please') || text.includes('thank you') || text.includes('appreciate')) {\n            return 'polite';\n        } else if (text.includes('problem') || text.includes('issue') || text.includes('concern')) {\n            return 'concerned';\n        } else if (text.includes('think') || text.includes('believe') || text.includes('consider')) {\n            return 'thoughtful';\n        } else {\n            return 'neutral';\n        }\n    }\n\n    extractTopics(transcript) {\n        const text = transcript.toLowerCase();\n        const topics = [];\n\n        if (text.includes('work') || text.includes('job') || text.includes('career')) {\n            topics.push('work/career');\n        }\n        if (text.includes('family') || text.includes('home') || text.includes('personal')) {\n            topics.push('personal/family');\n        }\n        if (text.includes('health') || text.includes('exercise') || text.includes('fitness')) {\n            topics.push('health/fitness');\n        }\n        if (text.includes('money') || text.includes('finance') || text.includes('budget')) {\n            topics.push('finance');\n        }\n        if (text.includes('travel') || text.includes('vacation') || text.includes('trip')) {\n            topics.push('travel');\n        }\n\n        return topics.length > 0 ? topics : ['general'];\n    }\n\n    generateSuggestions(sentiment, wordCount, tone) {\n        const suggestions = [];\n\n        if (wordCount < 10) {\n            suggestions.push('Try speaking for longer to provide more context');\n        }\n        if (wordCount > 200) {\n            suggestions.push('Consider breaking your thoughts into smaller segments');\n        }\n        if (sentiment === 'negative') {\n            suggestions.push('Consider focusing on positive aspects or solutions');\n        }\n        if (tone === 'concerned') {\n            suggestions.push('Try to balance concerns with potential solutions');\n        }\n\n        return suggestions.length > 0 ? suggestions : ['Your voice input was clear and well-structured'];\n    }\n\n    generateActionItems(transcript) {\n        const text = transcript.toLowerCase();\n        const actions = [];\n\n        if (text.includes('need to') || text.includes('should') || text.includes('must')) {\n            actions.push('Review and prioritize mentioned tasks');\n        }\n        if (text.includes('problem') || text.includes('issue')) {\n            actions.push('Address the mentioned concerns');\n        }\n        if (text.includes('plan') || text.includes('schedule')) {\n            actions.push('Create a plan based on your input');\n        }\n\n        return actions.length > 0 ? actions : ['Consider what next steps you\\'d like to take'];\n    }\n\n    // Generate review from voice input\n    async generateReviewFromVoice(transcript, reviewType = 'general', rating = 5) {\n        const analysis = await this.analyzeVoiceInput(transcript, { reviewType, rating });\n        \n        if (!analysis.success) {\n            return analysis;\n        }\n\n        // Generate review text based on analysis\n        const reviewText = this.formatReviewText(analysis.analysis, reviewType, rating);\n        \n        return {\n            ...analysis,\n            reviewText\n        };\n    }\n\n    formatReviewText(analysis, reviewType, rating) {\n        const { sentiment, keyPoints, tone, summary } = analysis;\n        \n        let reviewText = '';\n        \n        // Start with rating\n        const stars = '⭐'.repeat(rating);\n        reviewText += `${stars}\\n\\n`;\n        \n        // Add sentiment-based opening\n        if (sentiment === 'positive') {\n            reviewText += `I had a wonderful experience with ${reviewType}. `;\n        } else if (sentiment === 'negative') {\n            reviewText += `My experience with ${reviewType} was disappointing. `;\n        } else {\n            reviewText += `My experience with ${reviewType} was mixed. `;\n        }\n        \n        // Add key points\n        if (keyPoints && keyPoints.length > 0) {\n            reviewText += keyPoints.join(' ');\n        } else {\n            reviewText += summary;\n        }\n        \n        // Add tone-appropriate closing\n        if (tone === 'enthusiastic') {\n            reviewText += ' I highly recommend this experience!';\n        } else if (tone === 'concerned') {\n            reviewText += ' I hope these issues can be addressed.';\n        } else {\n            reviewText += ' Overall, it was a decent experience.';\n        }\n        \n        return reviewText;\n    }\n}\n\nexport default new LLMService(); ","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport VoiceRecognition from '../components/VoiceRecognition';\nimport VoiceAnalysis from '../components/VoiceAnalysis';\nimport llmService from '../services/llmService';\nimport './ReviewGenerator.css';\n\nconst ReviewGenerator = () => {\n    const [reviewData, setReviewData] = useState({\n        reviewType: 'restaurant',\n        rating: 5,\n        tone: 'professional',\n        pros: '',\n        cons: '',\n        experience: ''\n    });\n    const [generatedReview, setGeneratedReview] = useState('');\n    const [isGenerating, setIsGenerating] = useState(false);\n    const [analysis, setAnalysis] = useState(null);\n    const [isAnalyzing, setIsAnalyzing] = useState(false);\n    const [showAnalysis, setShowAnalysis] = useState(false);\n    const history = useHistory();\n\n    const reviewTypes = [\n        { value: 'restaurant', label: 'Restaurant', icon: '🍽️' },\n        { value: 'hotel', label: 'Hotel', icon: '🏨' },\n        { value: 'product', label: 'Product', icon: '📱' },\n        { value: 'service', label: 'Service', icon: '🛠️' },\n        { value: 'experience', label: 'Experience', icon: '🎯' },\n        { value: 'app', label: 'App/Software', icon: '💻' },\n        { value: 'place', label: 'Place/Location', icon: '📍' },\n        { value: 'general', label: 'General', icon: '📝' }\n    ];\n\n    const tones = [\n        { value: 'professional', label: 'Professional', icon: '👔' },\n        { value: 'casual', label: 'Casual', icon: '😊' },\n        { value: 'enthusiastic', label: 'Enthusiastic', icon: '🎉' },\n        { value: 'critical', label: 'Critical', icon: '🤔' },\n        { value: 'balanced', label: 'Balanced', icon: '⚖️' }\n    ];\n\n    const handleInputChange = (field, value) => {\n        setReviewData(prev => ({\n            ...prev,\n            [field]: value\n        }));\n    };\n\n    const handleVoiceTranscript = (field) => (transcript) => {\n        setReviewData(prev => ({\n            ...prev,\n            [field]: transcript\n        }));\n    };\n\n    const generateReview = () => {\n        setIsGenerating(true);\n        \n        setTimeout(() => {\n            const review = createReview(reviewData);\n            setGeneratedReview(review);\n            setIsGenerating(false);\n            \n            // Save review to localStorage for history\n            const reviewHistory = JSON.parse(localStorage.getItem('reviewHistory') || '[]');\n            const newReview = {\n                id: Date.now(),\n                reviewType: reviewData.reviewType,\n                itemName: `${reviewData.reviewType.charAt(0).toUpperCase() + reviewData.reviewType.slice(1)} Review`,\n                category: reviewData.reviewType,\n                rating: reviewData.rating,\n                tone: reviewData.tone,\n                pros: reviewData.pros,\n                cons: reviewData.cons,\n                experience: reviewData.experience,\n                review: review,\n                timestamp: new Date().toISOString()\n            };\n            reviewHistory.unshift(newReview);\n            localStorage.setItem('reviewHistory', JSON.stringify(reviewHistory.slice(0, 50))); // Keep last 50\n            \n            // Auto-analyze the generated review\n            setTimeout(() => {\n                analyzeReview(review);\n            }, 500);\n        }, 2000);\n    };\n\n    const analyzeReview = async (reviewText) => {\n        if (!reviewText || reviewText.trim().length === 0) {\n            return;\n        }\n\n        setIsAnalyzing(true);\n        try {\n            const result = await llmService.analyzeVoiceInput(reviewText, {\n                reviewType: reviewData.reviewType,\n                rating: reviewData.rating,\n                tone: reviewData.tone,\n                isGeneratedReview: true,\n                timestamp: new Date().toISOString()\n            });\n            \n            setAnalysis(result);\n            setShowAnalysis(true);\n            console.log('Review analysis result:', result);\n        } catch (error) {\n            console.error('Review analysis failed:', error);\n            setAnalysis({\n                success: false,\n                error: error.message || 'Analysis failed'\n            });\n        } finally {\n            setIsAnalyzing(false);\n        }\n    };\n\n    const createReview = (data) => {\n        const { reviewType, rating, tone, pros, cons, experience } = data;\n        \n        let review = '';\n        const stars = '⭐'.repeat(rating) + '☆'.repeat(5 - rating);\n        \n        const toneWords = {\n            professional: { positive: 'excellent', negative: 'disappointing', neutral: 'satisfactory' },\n            casual: { positive: 'awesome', negative: 'not great', neutral: 'okay' },\n            enthusiastic: { positive: 'amazing', negative: 'terrible', neutral: 'decent' },\n            critical: { positive: 'adequate', negative: 'poor', neutral: 'acceptable' },\n            balanced: { positive: 'good', negative: 'lacking', neutral: 'fair' }\n        };\n        \n        const words = toneWords[tone];\n        \n        review = `${stars}\\n\\n${reviewType.charAt(0).toUpperCase() + reviewType.slice(1)} Review\\n\\n`;\n        \n        if (rating >= 4) {\n            review += `This ${reviewType} is ${words.positive}. `;\n        } else if (rating <= 2) {\n            review += `This ${reviewType} was ${words.negative}. `;\n        } else {\n            review += `This ${reviewType} is ${words.neutral}. `;\n        }\n        \n        if (pros) {\n            review += `\\n\\nWhat I liked:\\n${pros}`;\n        }\n        \n        if (cons) {\n            review += `\\n\\nWhat could be improved:\\n${cons}`;\n        }\n        \n        if (experience) {\n            review += `\\n\\nMy experience:\\n${experience}`;\n        }\n        \n        if (rating >= 4) {\n            review += `\\n\\nI would definitely recommend this to others!`;\n        } else if (rating <= 2) {\n            review += `\\n\\nI would not recommend this.`;\n        } else {\n            review += `\\n\\nIt's worth considering if you're interested.`;\n        }\n        \n        return review;\n    };\n\n    const copyToClipboard = () => {\n        navigator.clipboard.writeText(generatedReview);\n        alert('Review copied to clipboard!');\n    };\n\n    const resetReview = () => {\n        setReviewData({\n            reviewType: 'restaurant',\n            rating: 5,\n            tone: 'professional',\n            pros: '',\n            cons: '',\n            experience: ''\n        });\n        setGeneratedReview('');\n        setAnalysis(null);\n        setShowAnalysis(false);\n    };\n\n    const handleGenerateReviewFromAnalysis = async (transcript, analysisData) => {\n        try {\n            const result = await llmService.generateReviewFromVoice(\n                transcript, \n                reviewData.reviewType, \n                reviewData.rating\n            );\n            \n            if (result.success) {\n                setGeneratedReview(result.reviewText);\n            }\n        } catch (error) {\n            console.error('Review generation failed:', error);\n        }\n    };\n\n    const handleSaveAnalysis = (analysisData) => {\n        const analysisRecord = {\n            id: Date.now(),\n            analysis: analysisData,\n            reviewData: reviewData,\n            timestamp: new Date().toISOString()\n        };\n        \n        // Save to localStorage\n        const existingAnalyses = JSON.parse(localStorage.getItem('reviewAnalyses') || '[]');\n        localStorage.setItem('reviewAnalyses', JSON.stringify([analysisRecord, ...existingAnalyses]));\n        \n        alert('Analysis saved successfully!');\n    };\n\n    return (\n        <div className=\"review-generator\">\n            <div className=\"review-container\">\n                <div className=\"review-header\">\n                    <h1>📝 AI-Powered Review Generator</h1>\n                    <p>Create professional reviews with AI analysis and insights</p>\n                </div>\n\n                {!generatedReview ? (\n                    <div className=\"review-form\">\n                        <div className=\"form-section\">\n                            <h2>🎯 Review Settings</h2>\n                            <div className=\"settings-grid\">\n                                <div className=\"setting-group\">\n                                    <label>Review Type:</label>\n                                    <div className=\"type-options\">\n                                        {reviewTypes.map(type => (\n                                            <button\n                                                key={type.value}\n                                                className={`type-option ${reviewData.reviewType === type.value ? 'active' : ''}`}\n                                                onClick={() => handleInputChange('reviewType', type.value)}\n                                            >\n                                                <span className=\"type-icon\">{type.icon}</span>\n                                                <span>{type.label}</span>\n                                            </button>\n                                        ))}\n                                    </div>\n                                </div>\n\n                                <div className=\"setting-group\">\n                                    <label>Rating: {reviewData.rating}/5</label>\n                                    <div className=\"rating-input\">\n                                        {[1, 2, 3, 4, 5].map(star => (\n                                            <button\n                                                key={star}\n                                                className={`star-btn ${star <= reviewData.rating ? 'active' : ''}`}\n                                                onClick={() => handleInputChange('rating', star)}\n                                            >\n                                                ⭐\n                                            </button>\n                                        ))}\n                                    </div>\n                                </div>\n\n                                <div className=\"setting-group\">\n                                    <label>Tone:</label>\n                                    <div className=\"tone-options\">\n                                        {tones.map(tone => (\n                                            <button\n                                                key={tone.value}\n                                                className={`tone-option ${reviewData.tone === tone.value ? 'active' : ''}`}\n                                                onClick={() => handleInputChange('tone', tone.value)}\n                                            >\n                                                <span className=\"tone-icon\">{tone.icon}</span>\n                                                <span>{tone.label}</span>\n                                            </button>\n                                        ))}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"form-section\">\n                            <h2>✍️ Review Content</h2>\n                            <div className=\"content-grid\">\n                                <div className=\"content-group\">\n                                    <label>What did you like? (Pros)</label>\n                                    <div className=\"input-with-voice\">\n                                        <textarea\n                                            value={reviewData.pros}\n                                            onChange={(e) => handleInputChange('pros', e.target.value)}\n                                            placeholder=\"Describe what you liked about this experience...\"\n                                            rows=\"3\"\n                                        />\n                                        <VoiceRecognition\n                                            onTranscript={handleVoiceTranscript('pros')}\n                                            placeholder=\"Speak about the positive aspects...\"\n                                        />\n                                    </div>\n                                </div>\n\n                                <div className=\"content-group\">\n                                    <label>What could be improved? (Cons)</label>\n                                    <div className=\"input-with-voice\">\n                                        <textarea\n                                            value={reviewData.cons}\n                                            onChange={(e) => handleInputChange('cons', e.target.value)}\n                                            placeholder=\"Describe areas for improvement...\"\n                                            rows=\"3\"\n                                        />\n                                        <VoiceRecognition\n                                            onTranscript={handleVoiceTranscript('cons')}\n                                            placeholder=\"Speak about areas for improvement...\"\n                                        />\n                                    </div>\n                                </div>\n\n                                <div className=\"content-group full-width\">\n                                    <label>Additional Experience Details</label>\n                                    <div className=\"input-with-voice\">\n                                        <textarea\n                                            value={reviewData.experience}\n                                            onChange={(e) => handleInputChange('experience', e.target.value)}\n                                            placeholder=\"Share your overall experience and thoughts...\"\n                                            rows=\"4\"\n                                        />\n                                        <VoiceRecognition\n                                            onTranscript={handleVoiceTranscript('experience')}\n                                            placeholder=\"Speak about your overall experience...\"\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"form-actions\">\n                            <button\n                                className=\"generate-btn\"\n                                onClick={generateReview}\n                                disabled={isGenerating}\n                            >\n                                {isGenerating ? (\n                                    <>\n                                        <span className=\"loading-spinner\"></span>\n                                        Generating Review...\n                                    </>\n                                ) : (\n                                    <>\n                                        ✨ Generate AI Review\n                                    </>\n                                )}\n                            </button>\n                            <button className=\"reset-btn\" onClick={resetReview}>\n                                🔄 Reset\n                            </button>\n                        </div>\n                        \n                        <div className=\"form-hint\">\n                            <p>💡 <strong>Tip:</strong> Fill in at least one field (pros, cons, or experience) for a better review. You can use voice input for any field!</p>\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"result-section\">\n                        <div className=\"result-header\">\n                            <h2>🎉 Your AI Review is Ready!</h2>\n                            <div className=\"result-actions\">\n                                <button onClick={copyToClipboard} className=\"copy-btn\">\n                                    📋 Copy Review\n                                </button>\n                                <button \n                                    onClick={() => setShowAnalysis(!showAnalysis)} \n                                    className=\"analysis-toggle-btn\"\n                                >\n                                    {showAnalysis ? '🔽 Hide Analysis' : '🧠 Show AI Analysis'}\n                                </button>\n                                <button onClick={resetReview} className=\"reset-btn\">\n                                    🎤 Create Another Review\n                                </button>\n                            </div>\n                        </div>\n\n                        <div className=\"review-content\">\n                            <pre>{generatedReview}</pre>\n                        </div>\n\n                        {isAnalyzing && (\n                            <div className=\"analyzing-indicator\">\n                                <div className=\"loading-spinner\"></div>\n                                <p>🤖 AI is analyzing your review...</p>\n                            </div>\n                        )}\n\n                        {showAnalysis && analysis && (\n                            <div className=\"analysis-section\">\n                                <h3>🧠 AI Analysis of Your Review</h3>\n                                <VoiceAnalysis\n                                    analysis={analysis}\n                                    onGenerateReview={handleGenerateReviewFromAnalysis}\n                                    onSaveAnalysis={handleSaveAnalysis}\n                                />\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default ReviewGenerator; ","import React, { useState } from 'react';\nimport VoiceRecognition from '../components/VoiceRecognition';\nimport VoiceAnalysis from '../components/VoiceAnalysis';\nimport llmService from '../services/llmService';\nimport './VoiceReview.css';\n\nconst VoiceReview = () => {\n    const [transcript, setTranscript] = useState('');\n    const [analysis, setAnalysis] = useState(null);\n    const [isAnalyzing, setIsAnalyzing] = useState(false);\n    const [reviewType, setReviewType] = useState('restaurant');\n    const [rating, setRating] = useState(5);\n    const [generatedReview, setGeneratedReview] = useState('');\n    const [savedReviews, setSavedReviews] = useState([]);\n\n    const handleTranscript = (newTranscript) => {\n        setTranscript(newTranscript);\n        // Auto-analyze when transcript changes significantly\n        if (newTranscript.length > 20 && !isAnalyzing) {\n            setTimeout(() => {\n                analyzeVoiceInput(newTranscript);\n            }, 1000);\n        }\n    };\n\n    const analyzeVoiceInput = async (inputTranscript) => {\n        if (!inputTranscript || inputTranscript.trim().length === 0) {\n            return;\n        }\n\n        setIsAnalyzing(true);\n        try {\n            const result = await llmService.analyzeVoiceInput(inputTranscript, {\n                reviewType,\n                rating,\n                timestamp: new Date().toISOString()\n            });\n            \n            setAnalysis(result);\n            console.log('Voice analysis result:', result);\n        } catch (error) {\n            console.error('Analysis failed:', error);\n            setAnalysis({\n                success: false,\n                error: error.message || 'Analysis failed'\n            });\n        } finally {\n            setIsAnalyzing(false);\n        }\n    };\n\n    const handleGenerateReview = async (inputTranscript, analysisData) => {\n        try {\n            const result = await llmService.generateReviewFromVoice(\n                inputTranscript, \n                reviewType, \n                rating\n            );\n            \n            if (result.success) {\n                setGeneratedReview(result.reviewText);\n                // Auto-save the generated review\n                const reviewData = {\n                    id: Date.now(),\n                    type: reviewType,\n                    rating,\n                    review: result.reviewText,\n                    transcript: inputTranscript,\n                    analysis: analysisData,\n                    timestamp: new Date().toISOString()\n                };\n                setSavedReviews(prev => [reviewData, ...prev]);\n                \n                // Save to localStorage\n                const existingReviews = JSON.parse(localStorage.getItem('voiceReviews') || '[]');\n                localStorage.setItem('voiceReviews', JSON.stringify([reviewData, ...existingReviews]));\n            }\n        } catch (error) {\n            console.error('Review generation failed:', error);\n        }\n    };\n\n    const handleSaveAnalysis = (analysisData) => {\n        const analysisRecord = {\n            id: Date.now(),\n            analysis: analysisData,\n            timestamp: new Date().toISOString()\n        };\n        \n        // Save to localStorage\n        const existingAnalyses = JSON.parse(localStorage.getItem('voiceAnalyses') || '[]');\n        localStorage.setItem('voiceAnalyses', JSON.stringify([analysisRecord, ...existingAnalyses]));\n        \n        alert('Analysis saved successfully!');\n    };\n\n    const clearAll = () => {\n        setTranscript('');\n        setAnalysis(null);\n        setGeneratedReview('');\n    };\n\n    return (\n        <div className=\"voice-review\">\n            <div className=\"voice-review-container\">\n                <div className=\"voice-review-header\">\n                    <h1>🎤 AI Voice Review Generator</h1>\n                    <p>Speak your experience and let AI analyze and generate a professional review</p>\n                </div>\n\n                <div className=\"voice-review-content\">\n                    <div className=\"settings-panel\">\n                        <div className=\"setting-group\">\n                            <label htmlFor=\"reviewType\">Review Type:</label>\n                            <select \n                                id=\"reviewType\"\n                                value={reviewType} \n                                onChange={(e) => setReviewType(e.target.value)}\n                                className=\"setting-input\"\n                            >\n                                <option value=\"restaurant\">Restaurant</option>\n                                <option value=\"hotel\">Hotel</option>\n                                <option value=\"product\">Product</option>\n                                <option value=\"service\">Service</option>\n                                <option value=\"experience\">Experience</option>\n                                <option value=\"app\">App/Software</option>\n                                <option value=\"place\">Place/Location</option>\n                                <option value=\"general\">General</option>\n                            </select>\n                        </div>\n\n                        <div className=\"setting-group\">\n                            <label htmlFor=\"rating\">Rating:</label>\n                            <div className=\"rating-input\">\n                                {[1, 2, 3, 4, 5].map(star => (\n                                    <button\n                                        key={star}\n                                        className={`star-btn ${star <= rating ? 'active' : ''}`}\n                                        onClick={() => setRating(star)}\n                                    >\n                                        ⭐\n                                    </button>\n                                ))}\n                                <span className=\"rating-text\">{rating}/5</span>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"voice-input-section\">\n                        <h2>🎤 Voice Input</h2>\n                        <VoiceRecognition\n                            onTranscript={handleTranscript}\n                            placeholder=\"Click the microphone and speak about your experience...\"\n                        />\n                        \n                        {transcript && (\n                            <div className=\"transcript-display\">\n                                <h3>Your Voice Input:</h3>\n                                <p>{transcript}</p>\n                                <div className=\"transcript-actions\">\n                                    <button onClick={() => analyzeVoiceInput(transcript)} className=\"analyze-btn\">\n                                        🔍 Analyze Voice\n                                    </button>\n                                    <button onClick={clearAll} className=\"clear-btn\">\n                                        🗑️ Clear All\n                                    </button>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n\n                    {isAnalyzing && (\n                        <div className=\"analyzing-indicator\">\n                            <div className=\"loading-spinner\"></div>\n                            <p>🤖 AI is analyzing your voice input...</p>\n                        </div>\n                    )}\n\n                    {analysis && (\n                        <div className=\"analysis-section\">\n                            <h2>🧠 AI Analysis</h2>\n                            <VoiceAnalysis\n                                analysis={analysis}\n                                onGenerateReview={handleGenerateReview}\n                                onSaveAnalysis={handleSaveAnalysis}\n                            />\n                        </div>\n                    )}\n\n                    {generatedReview && (\n                        <div className=\"generated-review-section\">\n                            <h2>✨ Generated Review</h2>\n                            <div className=\"generated-review\">\n                                <div className=\"review-content\">\n                                    <pre>{generatedReview}</pre>\n                                </div>\n                                <div className=\"review-actions\">\n                                    <button \n                                        onClick={() => navigator.clipboard.writeText(generatedReview)}\n                                        className=\"copy-btn\"\n                                    >\n                                        📋 Copy Review\n                                    </button>\n                                    <button \n                                        onClick={() => setGeneratedReview('')}\n                                        className=\"clear-btn\"\n                                    >\n                                        🗑️ Clear\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n\n                    {savedReviews.length > 0 && (\n                        <div className=\"saved-reviews-section\">\n                            <h2>💾 Saved Reviews</h2>\n                            <div className=\"saved-reviews\">\n                                {savedReviews.slice(0, 3).map(review => (\n                                    <div key={review.id} className=\"saved-review-item\">\n                                        <div className=\"review-header\">\n                                            <span className=\"review-type\">{review.type}</span>\n                                            <span className=\"review-rating\">{'⭐'.repeat(review.rating)}</span>\n                                            <span className=\"review-date\">\n                                                {new Date(review.timestamp).toLocaleDateString()}\n                                            </span>\n                                        </div>\n                                        <p className=\"review-text\">{review.review}</p>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default VoiceReview; ","import React, { useState } from 'react';\nimport VoiceRecognition from '../components/VoiceRecognition';\nimport './VoiceTest.css';\n\nconst VoiceTest = () => {\n    const [testResults, setTestResults] = useState([]);\n    const [browserInfo, setBrowserInfo] = useState({});\n\n    React.useEffect(() => {\n        // Get browser information\n        const info = {\n            userAgent: navigator.userAgent,\n            platform: navigator.platform,\n            language: navigator.language,\n            cookieEnabled: navigator.cookieEnabled,\n            onLine: navigator.onLine,\n            speechRecognition: !!(window.SpeechRecognition || window.webkitSpeechRecognition),\n            mediaDevices: !!navigator.mediaDevices,\n            getUserMedia: !!navigator.mediaDevices?.getUserMedia,\n        };\n        setBrowserInfo(info);\n    }, []);\n\n    const addTestResult = (message, type = 'info') => {\n        const timestamp = new Date().toLocaleTimeString();\n        setTestResults(prev => [...prev, { message, type, timestamp }]);\n    };\n\n    const testMicrophone = async () => {\n        try {\n            addTestResult('Testing microphone access...', 'info');\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            addTestResult('✅ Microphone access granted!', 'success');\n            stream.getTracks().forEach(track => track.stop());\n        } catch (error) {\n            addTestResult(`❌ Microphone access failed: ${error.message}`, 'error');\n        }\n    };\n\n    const clearResults = () => {\n        setTestResults([]);\n    };\n\n    const handleVoiceTranscript = (transcript) => {\n        addTestResult(`🎤 Voice input: \"${transcript}\"`, 'success');\n    };\n\n    return (\n        <div className=\"voice-test\">\n            <div className=\"test-container\">\n                <h1>🎤 Voice Recognition Test</h1>\n                <p>Use this page to test and debug voice recognition issues</p>\n\n                <div className=\"test-sections\">\n                    <div className=\"test-section\">\n                        <h2>Browser Information</h2>\n                        <div className=\"browser-info\">\n                            {Object.entries(browserInfo).map(([key, value]) => (\n                                <div key={key} className=\"info-item\">\n                                    <strong>{key}:</strong> \n                                    <span className={value ? 'success' : 'error'}>\n                                        {typeof value === 'boolean' ? (value ? '✅ Yes' : '❌ No') : value}\n                                    </span>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n\n                    <div className=\"test-section\">\n                        <h2>Microphone Test</h2>\n                        <button onClick={testMicrophone} className=\"test-btn\">\n                            🎤 Test Microphone Access\n                        </button>\n                    </div>\n\n                    <div className=\"test-section\">\n                        <h2>Voice Recognition Test</h2>\n                        <VoiceRecognition\n                            onTranscript={handleVoiceTranscript}\n                            placeholder=\"Speak something to test voice recognition...\"\n                        />\n                    </div>\n\n                    <div className=\"test-section\">\n                        <h2>Test Results</h2>\n                        <div className=\"test-controls\">\n                            <button onClick={clearResults} className=\"clear-btn\">\n                                🗑️ Clear Results\n                            </button>\n                        </div>\n                        <div className=\"test-results\">\n                            {testResults.length === 0 ? (\n                                <p className=\"no-results\">No test results yet. Try the tests above!</p>\n                            ) : (\n                                testResults.map((result, index) => (\n                                    <div key={index} className={`test-result ${result.type}`}>\n                                        <span className=\"timestamp\">[{result.timestamp}]</span>\n                                        <span className=\"message\">{result.message}</span>\n                                    </div>\n                                ))\n                            )}\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"troubleshooting-tips\">\n                    <h2>🔧 Troubleshooting Tips</h2>\n                    <ul>\n                        <li><strong>Browser Support:</strong> Use Chrome, Edge, or Safari</li>\n                        <li><strong>HTTPS Required:</strong> Voice recognition needs secure connection</li>\n                        <li><strong>Microphone Permissions:</strong> Allow microphone access when prompted</li>\n                        <li><strong>Clear Speech:</strong> Speak clearly and at normal volume</li>\n                        <li><strong>Quiet Environment:</strong> Reduce background noise</li>\n                        <li><strong>Check Console:</strong> Press F12 to see detailed error messages</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default VoiceTest; ","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './ReviewHistory.css';\n\nconst ReviewHistory = () => {\n    const [reviews, setReviews] = useState([]);\n    const [filteredReviews, setFilteredReviews] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [filterType, setFilterType] = useState('all');\n\n    useEffect(() => {\n        loadReviews();\n    }, []);\n\n    useEffect(() => {\n        filterReviews();\n    }, [reviews, searchTerm, filterType]);\n\n    const loadReviews = () => {\n        // Load from old reviewHistory\n        const savedReviews = JSON.parse(localStorage.getItem('reviewHistory') || '[]');\n        \n        // Load from new voiceReviews\n        const voiceReviews = JSON.parse(localStorage.getItem('voiceReviews') || '[]');\n        \n        // Combine and format voice reviews to match the expected structure\n        const formattedVoiceReviews = voiceReviews.map(voiceReview => ({\n            id: voiceReview.id,\n            reviewType: voiceReview.type,\n            itemName: `${voiceReview.type.charAt(0).toUpperCase() + voiceReview.type.slice(1)} Review`,\n            category: voiceReview.type,\n            rating: voiceReview.rating,\n            tone: 'voice-generated',\n            pros: '',\n            cons: '',\n            experience: voiceReview.transcript || '',\n            review: voiceReview.review,\n            timestamp: voiceReview.timestamp,\n            isVoiceReview: true\n        }));\n        \n        // Combine all reviews and sort by timestamp (newest first)\n        const allReviews = [...savedReviews, ...formattedVoiceReviews]\n            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        \n        setReviews(allReviews);\n    };\n\n    const filterReviews = () => {\n        let filtered = reviews;\n\n        // Filter by type\n        if (filterType !== 'all') {\n            filtered = filtered.filter(review => review.reviewType === filterType);\n        }\n\n        // Filter by search term\n        if (searchTerm) {\n            filtered = filtered.filter(review => \n                review.itemName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                review.category.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                review.review.toLowerCase().includes(searchTerm.toLowerCase())\n            );\n        }\n\n        setFilteredReviews(filtered);\n    };\n\n    const deleteReview = (id) => {\n        if (window.confirm('Are you sure you want to delete this review?')) {\n            const updatedReviews = reviews.filter(review => review.id !== id);\n            setReviews(updatedReviews);\n            \n            // Separate reviews by type\n            const regularReviews = updatedReviews.filter(review => !review.isVoiceReview);\n            const voiceReviews = updatedReviews.filter(review => review.isVoiceReview);\n            \n            // Update both storage systems\n            localStorage.setItem('reviewHistory', JSON.stringify(regularReviews));\n            \n            // Convert voice reviews back to original format\n            const originalVoiceReviews = voiceReviews.map(review => ({\n                id: review.id,\n                type: review.reviewType,\n                rating: review.rating,\n                review: review.review,\n                transcript: review.experience,\n                analysis: review.analysis,\n                timestamp: review.timestamp\n            }));\n            localStorage.setItem('voiceReviews', JSON.stringify(originalVoiceReviews));\n        }\n    };\n\n    const copyReview = (review) => {\n        navigator.clipboard.writeText(review.review);\n        alert('Review copied to clipboard!');\n    };\n\n    const formatDate = (timestamp) => {\n        return new Date(timestamp).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n    };\n\n    const getReviewTypeIcon = (type) => {\n        const icons = {\n            product: '📱',\n            restaurant: '🍽️',\n            hotel: '🏨',\n            movie: '🎬',\n            book: '📚',\n            service: '🛠️',\n            experience: '🎯',\n            app: '💻',\n            place: '📍',\n            general: '📝'\n        };\n        return icons[type] || '📝';\n    };\n\n    const getRatingStars = (rating) => {\n        return '⭐'.repeat(rating) + '☆'.repeat(5 - rating);\n    };\n\n    return (\n        <div className=\"review-history\">\n            <div className=\"history-container\">\n                <div className=\"history-header\">\n                    <h1>Review History</h1>\n                    <p>Your previously generated reviews</p>\n                </div>\n\n                <div className=\"filters-section\">\n                    <div className=\"search-box\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search reviews...\"\n                            value={searchTerm}\n                            onChange={(e) => setSearchTerm(e.target.value)}\n                        />\n                        <span className=\"search-icon\">🔍</span>\n                    </div>\n\n                    <div className=\"filter-buttons\">\n                        <button\n                            className={`filter-btn ${filterType === 'all' ? 'active' : ''}`}\n                            onClick={() => setFilterType('all')}\n                        >\n                            All\n                        </button>\n                        <button\n                            className={`filter-btn ${filterType === 'restaurant' ? 'active' : ''}`}\n                            onClick={() => setFilterType('restaurant')}\n                        >\n                            🍽️ Restaurants\n                        </button>\n                        <button\n                            className={`filter-btn ${filterType === 'hotel' ? 'active' : ''}`}\n                            onClick={() => setFilterType('hotel')}\n                        >\n                            🏨 Hotels\n                        </button>\n                        <button\n                            className={`filter-btn ${filterType === 'product' ? 'active' : ''}`}\n                            onClick={() => setFilterType('product')}\n                        >\n                            📱 Products\n                        </button>\n                        <button\n                            className={`filter-btn ${filterType === 'service' ? 'active' : ''}`}\n                            onClick={() => setFilterType('service')}\n                        >\n                            🛠️ Services\n                        </button>\n                        <button\n                            className={`filter-btn ${filterType === 'experience' ? 'active' : ''}`}\n                            onClick={() => setFilterType('experience')}\n                        >\n                            🎯 Experiences\n                        </button>\n                        <button\n                            className={`filter-btn ${filterType === 'app' ? 'active' : ''}`}\n                            onClick={() => setFilterType('app')}\n                        >\n                            💻 Apps\n                        </button>\n                        <button\n                            className={`filter-btn ${filterType === 'place' ? 'active' : ''}`}\n                            onClick={() => setFilterType('place')}\n                        >\n                            📍 Places\n                        </button>\n                        <button\n                            className={`filter-btn ${filterType === 'general' ? 'active' : ''}`}\n                            onClick={() => setFilterType('general')}\n                        >\n                            📝 General\n                        </button>\n                    </div>\n                </div>\n\n                {filteredReviews.length === 0 ? (\n                    <div className=\"empty-state\">\n                        <div className=\"empty-icon\">📝</div>\n                        <h3>No reviews found</h3>\n                        <p>\n                            {reviews.length === 0 \n                                ? \"You haven't generated any reviews yet. Start by creating your first review!\"\n                                : \"No reviews match your current search or filter criteria.\"\n                            }\n                        </p>\n                        {reviews.length === 0 && (\n                            <Link to=\"/generate\" className=\"cta-button\">\n                                Generate Your First Review\n                            </Link>\n                        )}\n                    </div>\n                ) : (\n                    <div className=\"reviews-grid\">\n                        {filteredReviews.map((review) => (\n                            <div key={review.id} className=\"review-card\">\n                                <div className=\"review-header\">\n                                    <div className=\"review-type\">\n                                        <span className=\"type-icon\">\n                                            {getReviewTypeIcon(review.reviewType)}\n                                        </span>\n                                        <span className=\"type-label\">\n                                            {review.reviewType.charAt(0).toUpperCase() + review.reviewType.slice(1)}\n                                            {review.isVoiceReview && <span className=\"voice-badge\">🎤</span>}\n                                        </span>\n                                    </div>\n                                    <div className=\"review-actions\">\n                                        <button\n                                            onClick={() => copyReview(review)}\n                                            className=\"action-btn copy\"\n                                            title=\"Copy review\"\n                                        >\n                                            📋\n                                        </button>\n                                        <button\n                                            onClick={() => deleteReview(review.id)}\n                                            className=\"action-btn delete\"\n                                            title=\"Delete review\"\n                                        >\n                                            🗑️\n                                        </button>\n                                    </div>\n                                </div>\n\n                                <div className=\"review-content\">\n                                    <h3 className=\"review-title\">{review.itemName}</h3>\n                                    <p className=\"review-category\">{review.category}</p>\n                                    <div className=\"review-rating\">\n                                        {getRatingStars(review.rating)}\n                                    </div>\n                                    <div className=\"review-text\">\n                                        {review.review.length > 200 \n                                            ? review.review.substring(0, 200) + '...'\n                                            : review.review\n                                        }\n                                    </div>\n                                </div>\n\n                                <div className=\"review-footer\">\n                                    <span className=\"review-date\">\n                                        {formatDate(review.timestamp)}\n                                    </span>\n                                    <span className=\"review-tone\">\n                                        {review.tone}\n                                    </span>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                )}\n\n                {filteredReviews.length > 0 && (\n                    <div className=\"history-stats\">\n                        <p>\n                            Showing {filteredReviews.length} of {reviews.length} reviews\n                        </p>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default ReviewHistory; ","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport './Header.css';\n\nconst Header = () => {\n    const location = useLocation();\n\n    return (\n        <header className=\"header\">\n            <div className=\"header-content\">\n                <Link to=\"/\" className=\"logo\">\n                    <span className=\"logo-icon\">⭐</span>\n                    <span className=\"logo-text\">ReviewGen</span>\n                </Link>\n                \n                <nav className=\"nav-menu\">\n                    <Link \n                        to=\"/\" \n                        className={`nav-link ${location.pathname === '/' ? 'active' : ''}`}\n                    >\n                        Home\n                    </Link>\n                    <Link \n                        to=\"/generate\" \n                        className={`nav-link ${location.pathname === '/generate' ? 'active' : ''}`}\n                    >\n                        Generate\n                    </Link>\n                    <Link \n                        to=\"/voice\" \n                        className={`nav-link ${location.pathname === '/voice' ? 'active' : ''}`}\n                    >\n                        🎤 Voice\n                    </Link>\n                    <Link \n                        to=\"/history\" \n                        className={`nav-link ${location.pathname === '/history' ? 'active' : ''}`}\n                    >\n                        History\n                    </Link>\n                </nav>\n            </div>\n        </header>\n    );\n};\n\nexport default Header; ","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport HomeScreen from './screens/HomeScreen';\nimport ReviewGenerator from './screens/ReviewGenerator';\nimport VoiceReview from './screens/VoiceReview';\nimport VoiceTest from './screens/VoiceTest';\nimport ReviewHistory from './screens/ReviewHistory';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Header />\n        <Switch>\n          <Route path=\"/\" exact component={HomeScreen} />\n          <Route path=\"/generate\" component={ReviewGenerator} />\n          <Route path=\"/voice\" component={VoiceReview} />\n          <Route path=\"/voice-test\" component={VoiceTest} />\n          <Route path=\"/history\" component={ReviewHistory} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}